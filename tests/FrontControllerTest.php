<?php
use frontController\WebFrontController;
use model\response\WebResponseObject;
use PHPUnit\Framework\TestCase;
/**
 * Created by PhpStorm.
 * User: jamesskywalker
 * Date: 09/11/2019
 * Time: 17:15
 */
class FrontControllerTest extends TestCase {

    private $frontController;
    private $dependencyManager;

    private $invalidNamespace;
    private $invalidClassname;
    private $controllerName;
    private $namespacedFrontController;
    private $requestObject;
    private $responseObject;

    public function setUp() :void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->dependencyManager = new \model\dependencyManager\WebDependencyManager();
        $this->requestObject = new \model\request\WebRequestObject();
        //set the request object and pass it to the DM
        $this->frontController = new WebFrontController(...$this->dependencyManager->getDependencies('frontController\WebFrontController'));
        $this->responseObject = new WebResponseObject();
        $this->invalidNamespace = 'noDice\jam';
        $this->invalidClassname = 'strawberryJam';
        $this->namespacedFrontController = 'frontController\WebFrontController';
        $this->controllerName = 'Landing';


    }

    public function CanInstantiateComparisonFrontController() {
        $this->assertTrue($this->frontController instanceof FrontControllerInterface);
    }

    /**
     * @depends testCanInstantiateComparisonFrontController
     */

    public function ComparisonFrontControllerIsCorrectType() {
        $this->assertFalse($this->frontController instanceof $this->invalidNamespace);
    }

    /**
     * @depends testComparisonFrontControllerIsCorrectType
     */

    public function CanInstantiateFrontController() {
        $frontController = new $this->namespacedFrontController(...$this->dependencyManager->getDependencies('frontController\WebFrontController'));

        $this->assertTrue($frontController instanceof $this->namespacedFrontController);
        $this->assertEquals($frontController, $this->frontController);

        return $frontController;
    }

    /**
     * @depends testCanInstantiateFrontController
     * @param FrontControllerInterface $frontController
     * @return FrontControllerInterface
     */

    public function CanSearchForControllerFromFrontController(FrontControllerInterface $frontController) {
        /**
         * make sure the internal search function works - set parseRequestObjectController && controllerExists() to public for testing
         */
        $frontController->parseRequestObjectController($this->controllerName);
        $this->assertTrue($frontController->controllerExists());
        $frontController->parseRequestObjectController($this->namespacedFrontController . '\\' . $this->controllerName);
        $this->assertTrue($frontController->controllerExists());
        $frontController->parseRequestObjectController($this->namespacedFrontController . $this->controllerName);
        $this->assertFalse($frontController->controllerExists());
        $frontController->parseRequestObjectController($this->invalidNamespace . $this->invalidClassname);
        $this->assertFalse($frontController->controllerExists());
        return $frontController;

    }

    /**
     * @depends testCanSearchForControllerFromFrontController
     * @param FrontControllerInterface $frontController
     * @return FrontControllerInterface
     */

    public function FrontControllerCanSearchForControllerFromRequestObject(FrontControllerInterface $frontController) {

        $this->assertTrue($frontController->requestIsValid());
        return $frontController;
    }

    /**
     * @depends testFrontControllerCanSearchForControllerFromRequestObject
     * @param FrontControllerInterface $frontController
     * @return FrontControllerInterface
     */

    public function FrontControllerCanSetControllerFromRequest(FrontControllerInterface $frontController) {

        $frontController->setController();
        $this->assertTrue($frontController->isValid());
        return $frontController;
    }

    /**
     * @depends testFrontControllerCanSetControllerFromRequest
     * @param FrontControllerInterface $frontController
     * @return FrontControllerInterface
     */
    public function CanRunControllerFromRequest(FrontControllerInterface $frontController) {
        $frontController->runRequest();
        $this->assertEquals($frontController->getResponse(),$this->responseObject);
    }

    /**
     *
     * final test with methods set to private - run singly to test
     * if failed set controller methods to public and re-run the rests
     *
     */

    public function testCanRunControllerWithPrivateMethodsFromAbstractFrontController() {
        $frontController = new $this->namespacedFrontController(...$this->dependencyManager->getDependencies($this->namespacedFrontController));
        $frontController->setController();
        $frontController->runRequest();
        $this->assertEquals($frontController->getResponse(),$this->responseObject);
    }
}
