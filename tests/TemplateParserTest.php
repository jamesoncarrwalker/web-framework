<?php

/**
 * Created by PhpStorm.
 * User: jamesskywalker
 * Date: 23/11/2019
 * Time: 15:37
 */
use PHPUnit\Framework\TestCase;

class TemplateParserTest extends TestCase {

    protected $parser;
    protected $data;

    public function setUp():void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->parser = new \model\helper\TemplateParser();
        $this->data = [];
    }

    public function testCanGetSubstringFromTags() {
        $result = 'string';
        $string = 'this is the [[ ' . $result . ']]';
        $parsedString = trim($this->parser->getValueToReplace($string, '[[', ']]', 0));

        $this->assertEquals($result, $parsedString);

    }

    public function testCanGetSubstringFromDifferentTags() {
        $result = 'string';
        $string = 'this is the section:: ' . $result . ']]';
        $parsedString = trim($this->parser->getValueToReplace($string, 'section::', ']]', 0));

        $this->assertEquals($result, $parsedString);

    }

    public function testCanGetSectionFromParsedKey() {
        $sectionString = 'section::partials/publicHeader';
        $sectionPath = 'partials/publicHeader';
        $template = 'the section I want is: [[ ' . $sectionString . ' ]], ok?';
        $parsedSectionString = trim($this->parser->getValueToReplace($template, '[[', ']]', 0));

        $this->assertEquals($sectionString, $parsedSectionString);

        $parsedSectionPath = trim($this->parser->getValueToReplace($parsedSectionString, '::', '', 0));
        $this->assertEquals($sectionPath,$parsedSectionPath);

    }

    public function testCanReplaceSingleDataItem() {

        $this->data['message'] = 'this is a message';
        $testTemplateName = 'test';
        $expectedReturn = 'the message is: ' . $this->data['message'];

        $parsedString = $this->parser->parse('[[', ']]', $testTemplateName, $this->data);

        $this->assertEquals($expectedReturn,$parsedString);
    }

    public function testCanReplaceMultipleDataItems() {

        $data = ['message' => 'this is a message','name' => 'James','scope' => 'public'];
        $templateString = 'testMultiple';
        $expectedReturn = 'hello James, the message is: ' . $data['message'] . ' - this message is public';
        $parsedString = $this->parser->parse('[[', ']]', $templateString, $data);

        $this->assertEquals($expectedReturn,$parsedString);
    }

    public function testCanGetValueFromArray() {
        $data = ['messages' => ['message_one' => 'message','message_two' => ' message 2','message_three' => 'message 3'],
                'names' => ['james' => ['one' => 'carr', 'two' => 'smith','three' => 'jones']]];


        $testStringOne = 'messages.message_one';
        $testResultOne = 'message';
        $testStringTwo = 'messages';
        $testResultTwo = $data['messages'];
        $testStringThree = 'names.james.two';
        $testResultThree = 'smith';
        $testStringFour = 'names.james.nine';

        $this->assertEquals($testResultOne,$this->parser->getValueFromData($testStringOne, $data));
        $this->assertEquals($testResultTwo,$this->parser->getValueFromData($testStringTwo, $data));
        $this->assertEquals($testResultThree,$this->parser->getValueFromData($testStringThree, $data));
        $this->assertNull($this->parser->getValueFromData($testStringFour, $data));
    }

    public function testCanGetValueFromObject() {
        $data = ['messages' => (object)['message_one' => 'message','message_two' => ' message 2','message_three' => 'message 3'],
                'names' => ['james' => ['one' => 'carr', 'two' => 'smith','three' => 'jones']]];


        $testStringOne = 'messages.message_one';
        $testResultOne = 'message';
        $testStringTwo = 'messages';
        $testResultTwo = $data['messages'];
        $testStringThree = 'names.james.two';
        $testResultThree = 'smith';

        $this->assertEquals($testResultOne,$this->parser->getValueFromData($testStringOne, $data));
        $this->assertEquals($testResultTwo,$this->parser->getValueFromData($testStringTwo, $data));
        $this->assertEquals($testResultThree,$this->parser->getValueFromData($testStringThree, $data));
    }

    public function CanReplaceSingleDataItemFromArrayField() {
        $this->data['testArray']['message'] = 'this is the new message';
        $testTemplateName = 'testarray';
        $expectedReturn = 'the message is: ' . $this->data['testArray']['message'];

        $parsedString = $this->parser->parse('[[', ']]', $testTemplateName, $this->data);

        $this->assertEquals($expectedReturn,$parsedString);

    }

    public function canReplaceSingleDataItemFromObjectFromDataArray() {

    }

    public function openAndClosingTagLengthsDontMatter() {

    }



    public function CanGetGetParentTemplateName() {
        $expectedResponse = 'public';
        $parsedString = \model\helper\TemplateParser::getRawTemplate('landing');

        $this->assertEquals($expectedResponse,$parsedString);

    }
}
